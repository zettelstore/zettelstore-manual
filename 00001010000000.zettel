title: Authentication
tags: #configuration #manual #zettelstore
syntax: zmk
role: manual

User authentication is enabled, if the [[configuration zettel|00001004020000]] contains a zettel identification.
The identified zettel should be a ""user zettel"".
That user acts as the owner of Zettelstore, and has full authorization.

=== User zettel
A user zettel must have set the following three meta data fields:

; ''ident'' (""user name"")
: The identifier to specify for authentication.
; ''cred''
: A hashed password as generated by the [[``zettelstore password``{=sh}|00001004050000]] command.
; ''role''
: Must have the value ''user''.

The title of the zettel specifies the real name of the user.

=== Authentication process
When someone tries to authenticate itself with an user identifier / ""user name"" and a password, the following process is executed:

# If meta key ''owner'' of the configuration zettel does not have a valid zettel identification as value, authentication fails.
# If the identifier is the owners identifier, use the user zettel of the owner.
## Otherweise:
## All zettel, where the meta key ''ident'' has the same value as the given user identifier. If the list is empty, authentication fails.
## From above list, the zettel with the lowest zettel identification is selected.
   Or in other words: the oldest zettel is selected.
   This is to ensure that no one can create a newer zettel with a fake credential.
   (Only the owner of a Zettelstore will be allowed to rename / delete a zettel.)
# If the zettel does not have role ''user'', authentication fails.
# If the zettel does not have a value for the meta key ''cred'', authentication fails.
# The value of the meta key ''cred'' is compared with the given password.
  If they do not match, authentication fails.
# Since the Zettelstore has an owner, the identifier matches a user zettel and the password conforms to the stored credential, authentication succeeds.

The main reason for trying the zettel of the owner of the Zettelstore first is the possibility that another user gives itself the same user name / identifier.
In this case, an attacker must also be able to change the configuration zettel.

Another reason is that in most cases the owner will be authenticated.

=== Authentication token
If an user is authenticated, a ""token" is created that must be sent with every request.
Otherwise the user will not be recognized by Zettelstore.

If the user was authenticated via the web interface, the token is stored in a [[""session cookie""|https://en.wikipedia.org/wiki/HTTP_cookie#Session_cookie]].
When the web browser is closed, theses cookies are not saved.
If the web browser remains inactive for a period, the user will be automatically logged off.
The maximum length of this period is specified by the ''token-timeout-html'' value of the [[startup configuration|00001004010000]].
Every time a web page is rendered, a new token is created and stored inside the cookie.

If you remotely access your Zettelstore via HTTP (not via HTTPS, which allows encrypted communication), your must set the ''insecure-cookie'' value of the startup configuration to ''true''.
In most cases, such a scenario is not recommended, because user name and password will be transferred as plain text.
You could make use of such scenario if you know all parties that access the local network where you access the Zettelstore.

If the user was authenticated via the API, the token will be returned as the content of the response.
Typically, the lifetime of this token is much shorterm e.g. 10 minutes.
It is specified by the ''token-timeout-api'' value of the startup configuration.
If you need more time, you can either re-authenticate the user or use an API call to refresh the token.