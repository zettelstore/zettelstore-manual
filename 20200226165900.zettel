title: Rationale for Zettelmarkup
tags: #zmk
syntax: zmk
role: manual

You may ask: why not using
[[Markdown|https://daringfireball.net/projects/markdown/]]? Why another Markup
language?

The markup language used for the zettelstore must conform to several
requirements:
* It must writeable and readable by humans.
** You should be able to write and read it just with a plain text editor.
* It must be supported for a long time (> 25 years)
** You don't want to convert the content into another format.
* It should be easy to write a parser.
** Different implementations in different programming languages should be
   possible.
* It must be possible to translate all markup elements into HTML.
** HTML is the predominat output format: web sites, e-books, ...
** HTML will probably last for a long time.
* It must be possible to tranlate the Markup into other formats.
* It must not be possible to enter non-interpreted text, e.g. HTML
** If somebody can enter HTML code in your text, he can enter JavaScript too.
   This is a security nightmare.

Of cource, Markdown can be written and read by humans. That was one of its
goal. More precisely, Markdown was created to write less HTML. Basically, every
HTML document is also a valid Markdown document.

One problem of Markdown is the absense of a real standard that is widely
implemented. [[CommonMark|https://commonmark.org/]] is an attempt to
standardize Markdown, but is not (yet?) widely used. Additionally, Markdown
implementations written in one single programming language are not compatible.
Therefore, it isn't really future-proof. In the past, the author of this page
had experimented with several Markdown implementations. He had to convert
multiple times one Markdown dialect into another.

Markdown is not easily parseable by a computer. For example, a user must
enter sometimes an empty line to use one Markdown element, and sometime he
doesn't need to enter an empty line for another element. Since HTML is part
of Markdown, you need a HTML parser to be on the safe side. Most Markdown
implementations skip over HTML parts, just copying it. This is a source for
security problems.

It is not easy to convert full Markdown, including the full standard of HTML5,
into another format. Even [[Pandoc|https://pandoc.org]], the most sophisticated
document converter, has its problems here.
